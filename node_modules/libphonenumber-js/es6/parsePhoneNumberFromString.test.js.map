{"version":3,"sources":["../source/parsePhoneNumberFromString.test.js"],"names":["_parsePhoneNumberFromString","metadata","parsePhoneNumberFromString","parameters","push","apply","describe","it","nationalNumber","should","equal","expect","to","be","undefined","phoneNumber","number","country","countryCallingCode","defaultCallingCode"],"mappings":"AAAA,OAAOA,2BAAP,MAAwC,8BAAxC;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,SAASC,0BAAT,GAAmD;AAAA,oCAAZC,UAAY;AAAZA,IAAAA,UAAY;AAAA;;AAClDA,EAAAA,UAAU,CAACC,IAAX,CAAgBH,QAAhB;AACA,SAAOD,2BAA2B,CAACK,KAA5B,CAAkC,IAAlC,EAAwCF,UAAxC,CAAP;AACA;;AAEDG,QAAQ,CAAC,4BAAD,EAA+B,YAAM;AAC5CC,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAClDL,IAAAA,0BAA0B,CAAC,2BAAD,EAA8B,IAA9B,CAA1B,CAA8DM,cAA9D,CAA6EC,MAA7E,CAAoFC,KAApF,CAA0F,YAA1F;AACAC,IAAAA,MAAM,CAACT,0BAA0B,CAAC,GAAD,EAAM,IAAN,CAA3B,CAAN,CAA8CU,EAA9C,CAAiDC,EAAjD,CAAoDC,SAApD;AACA,GAHC,CAAF;AAKAP,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACrCI,IAAAA,MAAM,CAACT,0BAA0B,CAAC,EAAD,CAA3B,CAAN,CAAuCU,EAAvC,CAA0CC,EAA1C,CAA6CC,SAA7C;AACA,GAFC,CAAF;AAIAP,EAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AAC1EL,IAAAA,0BAA0B,CAAC,4BAAD,EAA+B,IAA/B,CAA1B,CAA+DM,cAA/D,CAA8EC,MAA9E,CAAqFC,KAArF,CAA2F,YAA3F;AACAC,IAAAA,MAAM,CAACT,0BAA0B,CAAC,2BAAD,EAA8B,IAA9B,CAA3B,CAAN,CAAsEU,EAAtE,CAAyEC,EAAzE,CAA4EC,SAA5E;AACA,GAHC,CAAF;AAMAP,EAAAA,EAAE,CAAC,uEAAD,EAA0E,YAAM;AACjF,QAAMQ,WAAW,GAAGb,0BAA0B,CAAC,eAAD,CAA9C;AACAa,IAAAA,WAAW,CAACC,MAAZ,CAAmBP,MAAnB,CAA0BC,KAA1B,CAAgC,eAAhC;AACAK,IAAAA,WAAW,CAACE,OAAZ,CAAoBR,MAApB,CAA2BC,KAA3B,CAAiC,KAAjC;AACAK,IAAAA,WAAW,CAACG,kBAAZ,CAA+BT,MAA/B,CAAsCC,KAAtC,CAA4C,KAA5C;AACA,GALC,CAAF;AAOAH,EAAAA,EAAE,CAAC,8FAAD,EAAiG,YAAM;AACxG,QAAMQ,WAAW,GAAGb,0BAA0B,CAAC,WAAD,EAAc;AAAEiB,MAAAA,kBAAkB,EAAE;AAAtB,KAAd,CAA9C;AACAJ,IAAAA,WAAW,CAACC,MAAZ,CAAmBP,MAAnB,CAA0BC,KAA1B,CAAgC,eAAhC;AACAK,IAAAA,WAAW,CAACE,OAAZ,CAAoBR,MAApB,CAA2BC,KAA3B,CAAiC,KAAjC;AACAK,IAAAA,WAAW,CAACG,kBAAZ,CAA+BT,MAA/B,CAAsCC,KAAtC,CAA4C,KAA5C;AACA,GALC,CAAF;AAMA,CA7BO,CAAR","sourcesContent":["import _parsePhoneNumberFromString from './parsePhoneNumberFromString'\r\nimport metadata from '../metadata.min.json'\r\n\r\nfunction parsePhoneNumberFromString(...parameters) {\r\n\tparameters.push(metadata)\r\n\treturn _parsePhoneNumberFromString.apply(this, parameters)\r\n}\r\n\r\ndescribe('parsePhoneNumberFromString', () => {\r\n\tit('should parse phone numbers from string', () => {\r\n\t\tparsePhoneNumberFromString('Phone: 8 (800) 555 35 35.', 'RU').nationalNumber.should.equal('8005553535')\r\n\t\texpect(parsePhoneNumberFromString('3', 'RU')).to.be.undefined\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\texpect(parsePhoneNumberFromString('')).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse phone numbers when invalid country code is passed', () => {\r\n\t\tparsePhoneNumberFromString('Phone: +7 (800) 555 35 35.', 'XX').nationalNumber.should.equal('8005553535')\r\n\t\texpect(parsePhoneNumberFromString('Phone: 8 (800) 555-35-35.', 'XX')).to.be.undefined\r\n\t})\r\n\r\n\r\n\tit('should parse non-geographical numbering plan phone numbers (extended)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumberFromString('+870773111632')\r\n\t\tphoneNumber.number.should.equal('+870773111632')\r\n\t\tphoneNumber.country.should.equal('001')\r\n\t\tphoneNumber.countryCallingCode.should.equal('870')\r\n\t})\r\n\r\n\tit('should parse non-geographical numbering plan phone numbers (default country code) (extended)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumberFromString('773111632', { defaultCallingCode: '870' })\r\n\t\tphoneNumber.number.should.equal('+870773111632')\r\n\t\tphoneNumber.country.should.equal('001')\r\n\t\tphoneNumber.countryCallingCode.should.equal('870')\r\n\t})\r\n})\r\n"],"file":"parsePhoneNumberFromString.test.js"}